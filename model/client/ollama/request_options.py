"""
    Assistance Backbone for the assistance system developed as part of the VerDatAs project
    Copyright (C) 2022-2024 TU Dresden (Robert Schmidt)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

"""
    Ollama API

    API Spec for Ollama API. Please see https://github.com/jmorganca/ollama/blob/main/docs/api.md for more details.

    The version of the OpenAPI document: 0.1.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RequestOptions(BaseModel):
    """
    Additional model parameters listed in the documentation for the Modelfile such as `temperature`.
    """  # noqa: E501
    num_keep: Optional[StrictInt] = Field(default=None, description="Number of tokens to keep from the prompt. ")
    seed: Optional[StrictInt] = Field(default=None,
                                      description="Sets the random number seed to use for generation. Setting this to a specific number will make the model generate the same text for the same prompt. (Default: 0) ")
    num_predict: Optional[StrictInt] = Field(default=None,
                                             description="Maximum number of tokens to predict when generating text. (Default: 128, -1 = infinite generation, -2 = fill context) ")
    top_k: Optional[StrictInt] = Field(default=None,
                                       description="Reduces the probability of generating nonsense. A higher value (e.g. 100) will give more diverse answers, while a lower value (e.g. 10) will be more conservative. (Default: 40) ")
    top_p: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                           description="Works together with top-k. A higher value (e.g., 0.95) will lead to more diverse text, while a lower value (e.g., 0.5) will generate more focused and conservative text. (Default: 0.9) ")
    tfs_z: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                           description="Tail free sampling is used to reduce the impact of less probable tokens from the output. A higher value (e.g., 2.0) will reduce the impact more, while a value of 1.0 disables this setting. (default: 1) ")
    typical_p: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                               description="Typical p is used to reduce the impact of less probable tokens from the output. ")
    repeat_last_n: Optional[StrictInt] = Field(default=None,
                                               description="Sets how far back for the model to look back to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx) ")
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                                 description="The temperature of the model. Increasing the temperature will make the model answer more creatively. (Default: 0.8) ")
    repeat_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                                    description="Sets how strongly to penalize repetitions. A higher value (e.g., 1.5) will penalize repetitions more strongly, while a lower value (e.g., 0.9) will be more lenient. (Default: 1.1) ")
    presence_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                                      description="Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. ")
    frequency_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                                       description="Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim. ")
    mirostat: Optional[StrictInt] = Field(default=None,
                                          description="Enable Mirostat sampling for controlling perplexity. (default: 0, 0 = disabled, 1 = Mirostat, 2 = Mirostat 2.0) ")
    mirostat_tau: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                                  description="Controls the balance between coherence and diversity of the output. A lower value will result in more focused and coherent text. (Default: 5.0) ")
    mirostat_eta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                                  description="Influences how quickly the algorithm responds to feedback from the generated text. A lower learning rate will result in slower adjustments, while a higher learning rate will make the algorithm more responsive. (Default: 0.1) ")
    penalize_newline: Optional[StrictBool] = Field(default=None,
                                                   description="Penalize newlines in the output. (Default: false) ")
    stop: Optional[List[StrictStr]] = Field(default=None,
                                            description="Sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.")
    numa: Optional[StrictBool] = Field(default=None, description="Enable NUMA support. (Default: false) ")
    num_ctx: Optional[StrictInt] = Field(default=None,
                                         description="Sets the size of the context window used to generate the next token. ")
    num_batch: Optional[StrictInt] = Field(default=None,
                                           description="Sets the number of batches to use for generation. (Default: 1) ")
    num_gqa: Optional[StrictInt] = Field(default=None,
                                         description="The number of GQA groups in the transformer layer. Required for some ollama, for example it is 8 for `llama2:70b`. ")
    num_gpu: Optional[StrictInt] = Field(default=None,
                                         description="The number of layers to send to the GPU(s). On macOS it defaults to 1 to enable metal support, 0 to disable. ")
    main_gpu: Optional[StrictInt] = Field(default=None, description="The GPU to use for the main model. Default is 0. ")
    low_vram: Optional[StrictBool] = Field(default=None, description="Enable low VRAM mode. (Default: false) ")
    f16_kv: Optional[StrictBool] = Field(default=None, description="Enable f16 key/value. (Default: false) ")
    logits_all: Optional[StrictBool] = Field(default=None, description="Enable logits all. (Default: false) ")
    vocab_only: Optional[StrictBool] = Field(default=None, description="Enable vocab only. (Default: false) ")
    use_mmap: Optional[StrictBool] = Field(default=None, description="Enable mmap. (Default: false) ")
    use_mlock: Optional[StrictBool] = Field(default=None, description="Enable mlock. (Default: false) ")
    embedding_only: Optional[StrictBool] = Field(default=None, description="Enable embedding only. (Default: false) ")
    rope_frequency_base: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                                         description="The base of the rope frequency scale. (Default: 1.0) ")
    rope_frequency_scale: Optional[Union[StrictFloat, StrictInt]] = Field(default=None,
                                                                          description="The scale of the rope frequency. (Default: 1.0) ")
    num_thread: Optional[StrictInt] = Field(default=None,
                                            description="Sets the number of threads to use during computation. By default, Ollama will detect this for optimal performance. It is recommended to set this value to the number of physical CPU cores your system has (as opposed to the logical number of cores). ")
    __properties: ClassVar[List[str]] = ["num_keep", "seed", "num_predict", "top_k", "top_p", "tfs_z", "typical_p",
                                         "repeat_last_n", "temperature", "repeat_penalty", "presence_penalty",
                                         "frequency_penalty", "mirostat", "mirostat_tau", "mirostat_eta",
                                         "penalize_newline", "stop", "numa", "num_ctx", "num_batch", "num_gqa",
                                         "num_gpu", "main_gpu", "low_vram", "f16_kv", "logits_all", "vocab_only",
                                         "use_mmap", "use_mlock", "embedding_only", "rope_frequency_base",
                                         "rope_frequency_scale", "num_thread"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RequestOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RequestOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "num_keep": obj.get("num_keep"),
            "seed": obj.get("seed"),
            "num_predict": obj.get("num_predict"),
            "top_k": obj.get("top_k"),
            "top_p": obj.get("top_p"),
            "tfs_z": obj.get("tfs_z"),
            "typical_p": obj.get("typical_p"),
            "repeat_last_n": obj.get("repeat_last_n"),
            "temperature": obj.get("temperature"),
            "repeat_penalty": obj.get("repeat_penalty"),
            "presence_penalty": obj.get("presence_penalty"),
            "frequency_penalty": obj.get("frequency_penalty"),
            "mirostat": obj.get("mirostat"),
            "mirostat_tau": obj.get("mirostat_tau"),
            "mirostat_eta": obj.get("mirostat_eta"),
            "penalize_newline": obj.get("penalize_newline"),
            "stop": obj.get("stop"),
            "numa": obj.get("numa"),
            "num_ctx": obj.get("num_ctx"),
            "num_batch": obj.get("num_batch"),
            "num_gqa": obj.get("num_gqa"),
            "num_gpu": obj.get("num_gpu"),
            "main_gpu": obj.get("main_gpu"),
            "low_vram": obj.get("low_vram"),
            "f16_kv": obj.get("f16_kv"),
            "logits_all": obj.get("logits_all"),
            "vocab_only": obj.get("vocab_only"),
            "use_mmap": obj.get("use_mmap"),
            "use_mlock": obj.get("use_mlock"),
            "embedding_only": obj.get("embedding_only"),
            "rope_frequency_base": obj.get("rope_frequency_base"),
            "rope_frequency_scale": obj.get("rope_frequency_scale"),
            "num_thread": obj.get("num_thread")
        })
        return _obj
