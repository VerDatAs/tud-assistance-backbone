"""
    Assistance Backbone for the assistance system developed as part of the VerDatAs project
    Copyright (C) 2022-2024 TU Dresden (Sebastian Kucharski)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    TUD Assistance Backbone API

    Component for analyzing learning process data in the form of xAPI statements and providing feedback to learners' interactions and assistance and suggestions with regard to the user's learning state and the corresponding learning content.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, EmailStr, Field, validator  # noqa: F401

from model.api.base_model import BaseModel
from model.api.learning_path_element import LearningPathElement


class LearningPathCurrentLearningPathElement(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    LearningPathCurrentLearningPathElement - a model defined in OpenAPI

        learning_path_element_id: The learning_path_element_id of this LearningPathCurrentLearningPathElement [Optional].
        learning_path_element_target: The learning_path_element_target of this LearningPathCurrentLearningPathElement.
        step: The step of this LearningPathCurrentLearningPathElement.
        preferred: The preferred of this LearningPathCurrentLearningPathElement [Optional].
        learning_path_element_processed_requirements: The learning_path_element_processed_requirements of this LearningPathCurrentLearningPathElement [Optional].
        learning_path_element_not_processed_requirements: The learning_path_element_not_processed_requirements of this LearningPathCurrentLearningPathElement [Optional].
    """

    learning_path_element_id: Optional[str] = Field(alias="learningPathElementId", default=None)
    learning_path_element_target: str = Field(alias="learningPathElementTarget")
    step: int = Field(alias="step")
    preferred: Optional[bool] = Field(alias="preferred", default=None)
    learning_path_element_processed_requirements: Optional[List[LearningPathElement]] = Field(
        alias="learningPathElementProcessedRequirements", default=None)
    learning_path_element_not_processed_requirements: Optional[List[LearningPathElement]] = Field(
        alias="learningPathElementNotProcessedRequirements", default=None)

    @validator("step")
    def step_min(cls, value):
        assert value >= 1
        return value


LearningPathCurrentLearningPathElement.update_forward_refs()
