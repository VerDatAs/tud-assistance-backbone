"""
    Assistance Backbone for the assistance system developed as part of the VerDatAs project
    Copyright (C) 2022-2024 TU Dresden (Max Schaible, Sebastian Kucharski)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    TUD Assistance Backbone API

    Component for analyzing learning process data in the form of xAPI statements and providing feedback to learners' interactions and assistance and suggestions with regard to the user's learning state and the corresponding learning content.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, Field, StrictStr, field_validator

from model.api.assistance_initiation_request_parameter_condition import AssistanceInitiationRequestParameterCondition
from model.api.assistance_initiation_request_parameter_definition import AssistanceInitiationRequestParameterDefinition
from model.api.assistance_phase import AssistancePhase

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class AssistanceType(BaseModel):
    """
    Schema for representing a certain type of assistance.
    """  # noqa: E501
    key: StrictStr = Field(description="An identifier that uniquely identifies the type of assistance.")
    description: Optional[StrictStr] = Field(default=None,
                                             description="A textual description of the assistance type and the communicated information.")
    kind: StrictStr = Field(
        description="The kind of the assistance type which depends on how data is provided to trigger the assistance provision and which information is provided during the assistance process. The following kinds do exist   * `Cooperative Assistance` - which is assistance corresponding cooperative processes   * `Informational Feedback` - which is assistance that encompasses hints corresponding the user or the  learning environment   * `Proactive Suggestion` - which is assistance that encompasses the delivery of suggestions corresponding  the learning process initiated by the user   * `Reactive Suggestion`  - which is assistance that encompasses the delivery of suggestions corresponding  the learning process initiated by the system ")
    parameters: Optional[List[AssistanceInitiationRequestParameterDefinition]] = Field(default=None,
                                                                                       description="A list of parameters that should be provided during a proactive assistance initiation request.")
    preconditions: Optional[List[AssistanceInitiationRequestParameterCondition]] = Field(default=None,
                                                                                         description="A list of conditions that have to be fulfilled for the assistance to be initiable.")
    phases: Optional[List[AssistancePhase]] = Field(default=None,
                                                    description="A list of the phases during which assistance is provided.")
    __properties: ClassVar[List[str]] = ["key", "description", "kind", "parameters", "preconditions", "phases"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
        'cooperative_assistance', 'informational_feedback', 'proactive_assistance', 'reactive_assistance'):
            raise ValueError(
                "must be one of enum values ('cooperative_assistance', 'informational_feedback', 'proactive_assistance', 'reactive_assistance')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AssistanceType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in preconditions (list)
        _items = []
        if self.preconditions:
            for _item in self.preconditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['preconditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phases (list)
        _items = []
        if self.phases:
            for _item in self.phases:
                if _item:
                    _items.append(_item.to_dict())
            _dict['phases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AssistanceType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "description": obj.get("description"),
            "kind": obj.get("kind"),
            "parameters": [AssistanceInitiationRequestParameterDefinition.from_dict(_item) for _item in
                           obj.get("parameters")] if obj.get("parameters") is not None else None,
            "preconditions": [AssistanceInitiationRequestParameterCondition.from_dict(_item) for _item in
                              obj.get("preconditions")] if obj.get("preconditions") is not None else None,
            "phases": [AssistancePhase.from_dict(_item) for _item in obj.get("phases")] if obj.get(
                "phases") is not None else None
        })
        return _obj
